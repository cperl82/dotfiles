# -*- mode: Shell-script; -*-

function _ps {
    local pre="user:15,pid,ppid,tid,nlwp,class,rtprio:3=RTP,ni,pri"
    local post="vsz:9,rss:9,psr,pcpu,stat,wchan:25,tty"

    local show_comm="${1}"
    shift
    local timefmt="${1}"
    shift

    local args=("${@}")
    local selector=0

    for i in "${args[@]}"
    do
        if [[ "${i}" == "-t" || "${i}" == "-u" || "${i}" == "-p" ]]
        then
            selector=1
            break
        fi
    done

    [[ "${selector}"  -eq 0 ]] && args=("${args[@]}" "-e")

    [[ "${show_comm}" -eq 1 ]] && post=$(printf "%s,comm:15" "${post}")

    cmd=$(printf "ps -o %s,%s,%s,args %s" "${pre}" "${timefmt}" "${post}" "${args[*]}")
    eval "${cmd}"
}

function pse  { _ps 1 "bsdstart" "${@}"         ; }

function psel { _ps 1 "bsdstart" "${@}" -L      ; }

function psef { _ps 0 "bsdstart" "${@}" --forest; }

function pss  { _ps 1 "lstart"   "${@}"         ; } 

function pssl { _ps 1 "lstart"   "${@}" -L      ; }

function pssf { _ps 0 "lstart"   "${@}" --forest; }

# 2013-04-16: wrapper for nfsiostat to make it easier to read
# TODO: Remove the ability to pass flags that break parsing, i.e. `-h'.
function nfsiostat-formatted () {
	nfsiostat "$@" | awk '
	BEGIN {
		w_mnt    = 0;
		w_rdblks = 0;
		w_wrblks = 0;
		w_rddir  = 0;
		w_wrdir  = 0;
		w_rdsrv  = 0;
		w_wrsrv  = 0;
		w_ops    = 0;
		w_rops   = 0;
		w_wops   = 0;
		getline;
		getline;
	}

	$1 ~ /[-_A-Za-z0-9]+:/ {
		mnt    = $1;
		rdblks = $2;
		wrblks = $3;
		rddir  = $4;
		wrdir  = $5;
		rdsrv  = $6;
		wrsrv  = $7;
		ops    = $8;
		rops   = $9;
		wops   = $10;

		new_w_mnt = length(mnt);
		w_mnt = new_w_mnt > w_mnt ? new_w_mnt : w_mnt

		new_w_rdblks=length(rdblks);
		w_rdblks = new_w_rdblks > w_rdblks ? new_w_rdblks : w_rdblks

		new_w_wrblks=length(wrblks);
		w_wrblks = new_w_wrblks > w_wrblks ? new_w_wrblks : w_wrblks

		new_w_rddir=length(rddir);
		w_rddir = new_w_rddir > w_rddir ? new_w_rddir : w_rddir

		new_w_wrdir=length(wrdir);
		w_wrdir = new_w_wrdir > w_wrdir ? new_w_wrdir : w_wrdir

		new_w_rdsrv=length(rdsrv);
		w_rdsrv = new_w_rdsrv > w_rdsrv ? new_w_rdsrv : w_rdsrv

		new_w_wrsrv=length(wrsrv);
		w_wrsrv = new_w_wrsrv > w_wrsrv ? new_w_wrsrv : w_wrsrv

		new_w_ops=length(ops);
		w_ops = new_w_ops > w_ops ? new_w_ops : w_ops

		new_w_rops=length(rops);
		w_rops = new_w_rops > w_rops ? new_w_rops : w_rops

		new_w_wops=length(wops);
		w_wops = new_w_wops > w_wops ? new_w_wops : w_wops

		lines[i++] = $0;
	}

	$0 ~ /^$/ {
		for (j=0; j<i; j++) {
			split(lines[j], items, " ");
			printf("%-*s %*s %*s %*s %*s %*s %*s %*s %*s %*s\n",
				w_mnt,    items[1],
				w_rdblks, items[2],
				w_wrblks, items[3],
				w_rddir,  items[4],
				w_wrdir,  items[5],
				w_rdsrv,  items[6],
				w_wrsrv,  items[7],
				w_ops,    items[8],
				w_rops,   items[9],
				w_wops,   items[10]);
		}
		print;
		delete lines;
		i = 0;
	}'
}

# 2013-05-08: rpmenv function
function rpmenv {
	local fetch_uri
	local fetch_fmt
	local base

	function usage {
		echo "${FUNCNAME[0]} enter (directory | auto (--url URL | --file FILE) [--base BASE (defaults to RPMENV)])"
		echo "${FUNCNAME[0]} prepare"
		echo "${FUNCNAME[0]} exit"
	}

	case "${1}" in
	enter)
		function enter_env {
			local d="${1}"
			local n="${2}"
			test \! -d "${d}" && mkdir -p "${d}"
			export _RPMENV_SAVED_PS1=${PS1}
			export _RPMENV_SAVED_PWD=${PWD}
			export _RPMENV_SAVED_DIR=${d}
			export PS1='[\u@\h [RPMENV:'${n}'] \w]\$ '
			cd ${d}
			function rpmbuild { command rpmbuild --define "_topdir ${_RPMENV_SAVED_DIR}" "${@}"; }
			function rpm      { command rpm      --define "_topdir ${_RPMENV_SAVED_DIR}" "${@}"; }
		}

		shift
		case "${1}" in
		d|dir|directory)
			shift
			dir=$(path-canonical "${1}")
			name=$(basename "${dir}")
			enter_env "${dir}" "${name}"
			;;

		a|au|aut|auto)
			shift
			while [[ -n "${1}" ]]
			do
				case "${1}" in
				-u|--url)
					[[ -n "${fetch_uri}" ]] && usage && return
					fetch_uri="${2}"
					fetch_fmt="wget %s -O %s"
					shift
					shift
					;;
				-f|--file)
					[[ -n "${fetch_uri}" ]] && usage && return
					fetch_uri="${2}"
					fetch_fmt="cp %s %s"
					shift
					shift
					;;
				-b|--base)
					base="${2}"
					shift
					shift
					;;
				*)
					usage
					return
					;;
				esac
			done

			if [[ -z "${base}" && -z "${RPMENV}" ]]
			then
				echo 1>&2 "You have no RPMENV variable defined and did not specify --base, cannot continue"
				return 1
			fi

			if [[ -n "${base}" ]]
			then
				BASE="${base}"
			else
				BASE="${RPMENV}"
			fi

			srpm=$(basename "${fetch_uri}")
			name=$(echo "${srpm}" | sed -e 's/.src.rpm$//')
			tmp=$(mktemp -t "${name}.XXXXXX")
			cmd=$(printf "${fetch_fmt}" "${fetch_uri}" "${tmp}")
			eval "${cmd}"
			if [[ "${?}" -ne 0 ]]
			then
				echo 1>&2 "Unable to fetch ${fetch_uri}"
				return
			else
				env="${BASE}/${name}"
				enter_env "${env}" "${name}"
				mv "${tmp}" "${env}/${srpm}"
			fi
			;;
		*)
			usage
			return
		esac
		;;

	unpack|u)
		function one_dirent_matching {
			base="${1}"
			pattern="${2}"

			dirents=( $(ls -1 "${base}" | egrep "${pattern}") )

			if [[ ${#dirents[@]} -ne 1 ]]
			then
				echo 1>&2 "0 or more than one dirent found in ${base} matching ${pattern}, aborting"
				return 1
			fi
			echo "${base}/${dirents[0]}"
			return 0
		}

		if [[ -z "${_RPMENV_SAVED_DIR}" ]]
		then
			echo 1>&2 "It doesn't look like you're currently in an rpmenv, cannot unpack"
			return 1
		fi

		if [[ -d "${_RPMENV_SAVED_DIR}/SPECS" ]]
		then
			echo "Looks like src rpm may have already been unpacked, doing nothing"
			return 1
		fi

		srpm="${2}"
		shift
		shift

		srpm_file=$(one_dirent_matching "${_RPMENV_SAVED_DIR}/OTHER" ".*\.src\.rpm")
		[[ "${?}" -ne 0 ]] && return 1
		rpm -ivh "${srpm_file}"

		spec_file=$(one_dirent_matching "${_RPMENV_SAVED_DIR}/SPECS" ".*\.spec")
		[[ "${?}" -ne 0 ]] && return 1
		rpmbuild -bp --nodeps "${spec_file}"

		build_dir=$(one_dirent_matching "${_RPMENV_SAVED_DIR}/BUILD" ".*")
		[[ "${?}" -ne 0 ]] && return 1

		target_base=$(basename "${build_dir}")
		target_full="${_RPMENV_SAVED_DIR}/OTHER/${target_base}"
		cp -a "${build_dir}" "${target_full}"
		if [[ "${target_base}" =~ kernel- ]]
		then
			# Go one level further down for kernel packages
			target_full=$(one_dirent_matching "${target_full}" "linux-.*")
			[[ "${?}" -ne 0 ]] && return 1
		fi
		cd "${target_full}" && git init && git add . && git commit -m initial && cd -
		;;

	exit)
		shift
		cd ${_RPMENV_SAVED_PWD}
		export PS1=${_RPMENV_SAVED_PS1}
		unset _RPMENV_SAVED_PWD
		unset _RPMENV_SAVED_PS1
		unset _RPMENV_SAVED_DIR
		unset rpm
		unset rpmbuild
		;;

	*)
		usage
		return
		;;
	esac
}

# 2016-04-16: more rpm related helpers, for when I don't want the full thing above
function _rpm-cmd-with-topdir {
	cmd="${1}"
	dir="${2}"
	shift
	shift
	rest="${@}"
	printf '%s --define "_topdir %s" %s' "${cmd}" "${dir}" "${rest}"
}

function rpm-with-topdir {
	cmd=$(_rpm-cmd-with-topdir rpm "${@}")
	eval "${cmd}"
}

function rpmbuild-with-topdir {
	cmd=$(_rpm-cmd-with-topdir rpmbuild "${@}")
	eval "${cmd}"
}

# 2014-07-01 mapping of NFS mount points to sockets
function nfs-sockets {
	ss -iepn '( dport = :nfs )' \
	| awk '
		BEGIN {
			while ((getline < "/proc/mounts") > 0) {
				if ($3 == "nfs") {
					addr = gensub(/.*mountaddr=([^,]+).*/, "\\1", $4);
					if (mounts[addr])
						mounts[addr] = sprintf("%s %s", mounts[addr], $2);
					else
						mounts[addr] = $2
				}
			}
			getline
		}

		{
			state = $1;
			rcvq  = $2;
			sndq  = $3;
			local = $4;
			remot = $5;
			timer = $6;

			if (timer ~ /timer/) {
				ino = $7;
				sk  = $8;
			}
			else {
				timer = "";
				ino   = $6;
				sk    = $7;
			}

			getline;
			opts = $0;
			opts = gensub(/^[\t ]+/, "", opts);
			
			new_w_state = length(state);
			w_state = new_w_state > w_state ? new_w_state : w_state;

			new_w_rcvq = length(rcvq);
			w_rcvq = new_w_rcvq > w_rcvq ? new_w_rcvq : w_rcvq;

			new_w_sndq = length(sndq);
			w_sndq = new_w_sndq > w_sndq ? new_w_sndq : w_sndq;

			new_w_local = length(local);
			w_local = new_w_local > w_local ? new_w_local : w_local;

			new_w_remot = length(remot);
			w_remot = new_w_remot > w_remot ? new_w_remot : w_remot;

			new_w_timer = length(timer);
			w_timer = new_w_timer > w_timer ? new_w_timer : w_timer;

			new_w_ino = length(ino);
			w_ino = new_w_ino > w_ino ? new_w_ino : w_ino;

			new_w_sk = length(sk);
			w_sk = new_w_sk > w_sk ? new_w_sk : w_sk;

			new_w_opts = length(opts);
			w_opts = new_w_opts > w_opts ? new_w_opts : w_opts;

			lines[i++] = sprintf("%s|%s|%s|%s|%s|%s|%s|%s|%s", state, rcvq, sndq, local, remot, ino, sk, opts, timer);
		}

		END {
			for (j=0; j<i; j++) {
				split(lines[j], items, "|");
				split(items[5], remote_endpoint, ":");
				printf("%*s %*s %*s %*s %*s %-*s %*s %-*s %*s %s\n",
					w_state, items[1],
					w_rcvq,  items[2],
					w_sndq,  items[3],
					w_local, items[4],
					w_remot, items[5],
					w_ino,   items[6],
					w_sk,    items[7],
					w_opts,  items[8],
					w_timer, items[9],
					mounts[remote_endpoint[1]]);
			}
		}'
}

# 2014-09-04 ephemeral ports
function ephemeral-port-netstat-ipv4 {
    local awk=""

    read -d '' -r awk <<-'EOF'
	BEGIN {
	        getline < "/proc/sys/net/ipv4/ip_local_port_range";
	        low=int($1);
	        high=int($2);
	}

	{
                split($4, a, ":");
	        port=int(a[2]);
	        if (port >= low && port <= high) {
	                print
	        }
	}
	EOF

    netstat -n --protocol=inet | tail -n +3 | awk "${awk}"
}

function ephemeral-port-netstat-ipv4-unique-by-type {
    local awk=""

    read -d '' -r awk <<-'EOF'
	BEGIN {
		SUBSEP = " ";
	}

	{
		split($4, a, ":");
		by_type[$1, a[2]] = 1;
	}

	END {
		for (key in by_type) {
			print key
		}
	}
	EOF

    ephemeral-port-netstat-ipv4 | awk "${awk}" | sort
}

function _urxvt-set-font {
    local font="${1}"

    if [[ -z "${font}" ]]
    then
	return
    fi

    # 2021-02-14 cperl: It would be nice if we could confirm we're running inside of URxvt
    # and just do nothing if not.  According to archlinux wiki, gnu screen versions newer
    # than 4.4 change the TERM environment variable to screen.${original_term}, so it
    # should be possible at some point.
    if [[ "${TERM}" =~ ^screen ]]
    then
	# shellcheck disable=SC1003
	printf '\eP\e]710;%s\007\e\\' "${font}"
    else
	printf '\e]710;%s\007' "${font}"
    fi
}

# 2021-02-14 cperl: I should also add one for xft fonts using fc-list
function urxvt-set-font-xlfd {
    local filter="${*}"

    font=$(xlsfonts | fzf -q "${filter}")
    if [[ -z "${font}" ]]
    then
	return
    fi

    _urxvt-set-font "${font}"
}

function setup-tty-aliases {
    local dircolors="${HOME}/.dircolors"

    if tty >/dev/null 2>&1
    then
        # Set directory listing colors to those listed in ~/.dircolors
        if [ -r "${dircolors}" ]
        then
            eval "$(dircolors "${dircolors}")"
        fi

        alias ls='ls --color=auto'
        alias grep='grep --color=auto'
    fi
}

function setup-misc {
    export PS1='[\u@\h \w]\$ '

    # Hack to work around the fact that gnome-terminal always sets TERM=xterm
    if [[ "${TERM}" == "xterm" && "${COLORTERM}" == "gnome-terminal" ]]
    then
	export TERM=xterm-256color
    fi


    # URxvt specific setting of font size.  See urxvt(1)
    if [[ "${TERM}" =~ rxvt-unicode.* ]]
    then
	function fnsz { printf '\e]710;xft:Monaco:pixelsize=%s\007' ${1}; }
    fi

    if [[ "${TERM}" =~ xterm.* ]]
    then
	function xterm-colorscheme {
	    # The idea of this function is to take a .Xresouces or .Xdefaults file as input and
	    # look through it for resources that would affect the way XTerm looks.  Then, when
	    # we find them, emit the XTerm escape sequences to set those things dynamically.
	    #
	    # I'm sure I'm missing some things, but this seems to work relatively well in giving
	    # me a way to dynamically change the XTerm colorscheme.
	    local filename="${1}"
	    declare -A defines

	    # Escape sequences are documented in xterm source in `ctlseqs.ms' (or after
	    # processing with nroff in `ctlseqs.txt').
	    # Also available here: http://invisible-island.net/xterm/ctlseqs/ctlseqs.html
	    cat "${filename}" | while read -r line
	    do
		if [[ "${line}" =~ ^#define ]]
		then
		    read -r _ key value <<< "${line}"
		    defines[${key}]=${value}
		    continue
		elif [[ "${line}" =~ ^(XTerm|\*) ]]
		then
		    additional=""
		    read -r key value <<< "${line}"
		    if   [[ "${key}" =~ foreground:$ ]]
		    then
			op="10"
			# Additional is to set the highlight background color to the
			# current foreground color (i.e. reverse video)
			additional="printf \"\033]17;%s\007\" \"\${what}\""
		    elif [[ "${key}" =~ background:$ ]]
		    then
			op="11"
			# Additional is to set the highlight foreground color to the
			# current background color (i.e. reverse video)
			additional="printf \"\033]19;%s\007\" \"\${what}\""
		    elif [[ "${key}" =~ color[0-9]+:$ ]]
		    then
			color=$(echo "${key}" | sed -e 's/^.*color\([0-9][0-9]*\).*$/\1/')
			op="4;${color}"
		    else
			continue
		    fi

		    if [[ -n "${defines[${value}]}" ]]
		    then
			what="${defines[$value]}"
		    else
			what="${value}"
		    fi

		    printf "\033]%s;%s\007" "${op}" "${what}"
		    [[ -n "${additional}" ]] && eval ${additional}

		else
		    continue
		fi
	    done
	}
    fi
}

function main
{
    setup-tty-aliases
    setup-misc
}

main "${@}"

